package database

import (
	"database/sql"
	"fmt"
	"strings"
)

func SeedSchedule(db *sql.DB) error {
	// –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –¥–∞–Ω–Ω—ã–µ
	var count int
	err := db.QueryRow("SELECT COUNT(*) FROM schedule").Scan(&count)
	if err != nil {
		return fmt.Errorf("check schedule count: %w", err)
	}

	if count > 0 {
		fmt.Println("–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ —É–∂–µ –∑–∞–ø–æ–ª–Ω–µ–Ω–æ")
		return nil
	}

	// –ï—Å–ª–∏ –ø—É—Å—Ç–æ ‚Äî –≤—Å—Ç–∞–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ
	schedule := []struct {
		weekType  string
		dayOfWeek string
		subject   string
		cabinet   string
	}{

		// –ß–∏—Å–ª–∏—Ç–µ–ª—å - –ü–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫
		{"—á–∏—Å–ª–∏—Ç–µ–ª—å", "–ø–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫", "–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω—ã–µ —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–∏", "523"},
		{"—á–∏—Å–ª–∏—Ç–µ–ª—å", "–ø–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫", "–û—Å–Ω–æ–≤—ã –∞–ª–≥–æ—Ä–∏—Ç–º–∏–∑–∞—Ü–∏–∏ –∏ –ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏—è", "514"},
		{"—á–∏—Å–ª–∏—Ç–µ–ª—å", "–ø–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫", "–≠–ª–µ–º–µ–Ω—Ç—ã –≤—ã—Å—à–µ–π –º–∞—Ç–µ–º–∞—Ç–∏–∫–∏", "512"},

		// –ß–∏—Å–ª–∏—Ç–µ–ª—å - –í—Ç–æ—Ä–Ω–∏–∫
		{"—á–∏—Å–ª–∏—Ç–µ–ª—å", "–≤—Ç–æ—Ä–Ω–∏–∫", "–¢–µ—Ö–Ω. —Ñ–∏–∑. —É—Ä–æ–≤–Ω—è –ø–µ—Ä–µ–¥–∞—á–∏ –¥–∞–Ω–Ω—ã—Ö", "523"},
		{"—á–∏—Å–ª–∏—Ç–µ–ª—å", "–≤—Ç–æ—Ä–Ω–∏–∫", "–§–∏–∑—Ä–∞", "–∑–∞–ª"},
		{"—á–∏—Å–ª–∏—Ç–µ–ª—å", "–≤—Ç–æ—Ä–Ω–∏–∫", "–ò–Ω–æ—Å—Ç—Ä–∞–Ω–Ω—ã–π —è–∑—ã–∫ –≤ –ø—Ä–æ—Ñ –¥–µ—è—Ç–µ–ª—å–Ω–æ—Å—Ç–∏", "307/309"},

		// –ß–∏—Å–ª–∏—Ç–µ–ª—å - –°—Ä–µ–¥–∞
		{"—á–∏—Å–ª–∏—Ç–µ–ª—å", "—Å—Ä–µ–¥–∞", "–û—Å–Ω–æ–≤—ã –∞–ª–≥–æ—Ä–∏—Ç–º–∏–∑–∞—Ü–∏–∏ –∏ –ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏—è", "514"},
		{"—á–∏—Å–ª–∏—Ç–µ–ª—å", "—Å—Ä–µ–¥–∞", "–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω—ã–µ —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–∏", "523"},
		{"—á–∏—Å–ª–∏—Ç–µ–ª—å", "—Å—Ä–µ–¥–∞", "–¢–µ—Ö–Ω. —Ñ–∏–∑. —É—Ä–æ–≤–Ω—è –ø–µ—Ä–µ–¥–∞—á–∏ –¥–∞–Ω–Ω—ã—Ö", "523"},

		// –ß–∏—Å–ª–∏—Ç–µ–ª—å - –ß–µ—Ç–≤–µ—Ä–≥
		{"—á–∏—Å–ª–∏—Ç–µ–ª—å", "—á–µ—Ç–≤–µ—Ä–≥", "–ò—Å—Ç–æ—Ä–∏—è –†–æ—Å—Å–∏–∏", "622"},
		{"—á–∏—Å–ª–∏—Ç–µ–ª—å", "—á–µ—Ç–≤–µ—Ä–≥", "–ê—Ä—Ö–µ—Ç–∏–∫—Ç—É—Ä–∞ –∞–ø–ø–∞—Ä–∞—Ç–Ω—ã—Ö —Å—Ä–µ–¥—Å—Ç–≤", "330"},
		{"—á–∏—Å–ª–∏—Ç–µ–ª—å", "—á–µ—Ç–≤–µ—Ä–≥", "–û–ø–µ—Ä–∞—Ü–∏–æ–Ω–Ω—ã–µ —Å–∏—Å—Ç–µ–º—ã –∏ —Å—Ä–µ–¥—ã", "503"},

		// –ß–∏—Å–ª–∏—Ç–µ–ª—å - –ü—è—Ç–Ω–∏—Ü–∞
		{"—á–∏—Å–ª–∏—Ç–µ–ª—å", "–ø—è—Ç–Ω–∏—Ü–∞", "–ê—Ä—Ö–µ—Ç–∏–∫—Ç—É—Ä–∞ –∞–ø–ø–∞—Ä–∞—Ç–Ω—ã—Ö —Å—Ä–µ–¥—Å—Ç–≤", "330"},
		{"—á–∏—Å–ª–∏—Ç–µ–ª—å", "–ø—è—Ç–Ω–∏—Ü–∞", "–ê—Ä–∑–µ—Ç–∏–∫—Ç—É—Ä–∞ –∞–ø–ø–∞—Ä–∞—Ç–Ω—ã—Ö —Å—Ä–µ–¥—Å—Ç–≤", "330"},
		{"—á–∏—Å–ª–∏—Ç–µ–ª—å", "–ø—è—Ç–Ω–∏—Ü–∞", "–≠–ª–µ–º–µ–Ω—Ç—ã –≤—ã—Å—à–µ–π –º–∞—Ç–µ–º–∞—Ç–∏–∫–∏", "512"},

		// –ß–∏—Å–ª–∏—Ç–µ–ª—å - –í—ã—Ö–æ–¥–Ω—ã–µ
		{"—á–∏—Å–ª–∏—Ç–µ–ª—å", "—Å—É–±–±–æ—Ç–∞", "–≤—ã—Ö–æ–¥–Ω–æ–π", ""},
		{"—á–∏—Å–ª–∏—Ç–µ–ª—å", "–≤–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ", "–≤—ã—Ö–æ–¥–Ω–æ–π", ""},

		// –ó–Ω–∞–º–µ–Ω–∞—Ç–µ–ª—å - –ü–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫
		{"–∑–Ω–∞–º–µ–Ω–∞—Ç–µ–ª—å", "–ø–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫", "–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω—ã–µ —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–∏", "523"},
		{"–∑–Ω–∞–º–µ–Ω–∞—Ç–µ–ª—å", "–ø–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫", "–û—Å–Ω–æ–≤—ã –∞–ª–≥–æ—Ä–∏—Ç–º–∏–∑–∞—Ü–∏–∏ –∏ –ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏—è", "514"},
		{"–∑–Ω–∞–º–µ–Ω–∞—Ç–µ–ª—å", "–ø–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫", "–ê—Ä—Ö–µ—Ç–∏–∫—Ç—É—Ä–∞ –∞–ø–ø–∞—Ä–∞—Ç–Ω—ã—Ö —Å—Ä–µ–¥—Å—Ç–≤", "330"},

		// –ó–Ω–∞–º–µ–Ω–∞—Ç–µ–ª—å - –í—Ç–æ—Ä–Ω–∏–∫
		{"–∑–Ω–∞–º–µ–Ω–∞—Ç–µ–ª—å", "–≤—Ç–æ—Ä–Ω–∏–∫", "–¢–µ—Ö–Ω. —Ñ–∏–∑. —É—Ä–æ–≤–Ω—è –ø–µ—Ä–µ–¥–∞—á–∏ –¥–∞–Ω–Ω—ã—Ö", "523"},
		{"–∑–Ω–∞–º–µ–Ω–∞—Ç–µ–ª—å", "–≤—Ç–æ—Ä–Ω–∏–∫", "–§–∏–∑—Ä–∞", "–∑–∞–ª"},
		{"–∑–Ω–∞–º–µ–Ω–∞—Ç–µ–ª—å", "–≤—Ç–æ—Ä–Ω–∏–∫", "–ò–Ω–æ—Å—Ç—Ä–∞–Ω–Ω—ã–π —è–∑—ã–∫ –≤ –ø—Ä–æ—Ñ –¥–µ—è—Ç–µ–ª—å–Ω–æ—Å—Ç–∏", "307/309"},

		// –ó–Ω–∞–º–µ–Ω–∞—Ç–µ–ª—å - –°—Ä–µ–¥–∞
		{"–∑–Ω–∞–º–µ–Ω–∞—Ç–µ–ª—å", "—Å—Ä–µ–¥–∞", "–û—Å–Ω–æ–≤—ã –∞–ª–≥–æ—Ä–∏—Ç–º–∏–∑–∞—Ü–∏–∏ –∏ –ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏—è", "514"},
		{"–∑–Ω–∞–º–µ–Ω–∞—Ç–µ–ª—å", "—Å—Ä–µ–¥–∞", "–û–ø–µ—Ä–∞—Ü–∏–æ–Ω–Ω—ã–µ —Å–∏—Å—Ç–µ–º—ã –∏ —Å—Ä–µ–¥—ã", "503"},
		{"–∑–Ω–∞–º–µ–Ω–∞—Ç–µ–ª—å", "—Å—Ä–µ–¥–∞", "–û—Å–Ω–æ–≤—ã –∞–ª–≥–æ—Ä–∏—Ç–º–∏–∑–∞—Ü–∏–∏ –∏ –ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏—è", "514"},

		// –ó–Ω–∞–º–µ–Ω–∞—Ç–µ–ª—å - –ß–µ—Ç–≤–µ—Ä–≥
		{"–∑–Ω–∞–º–µ–Ω–∞—Ç–µ–ª—å", "—á–µ—Ç–≤–µ—Ä–≥", "–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω—ã–µ —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–∏", "523"},
		{"–∑–Ω–∞–º–µ–Ω–∞—Ç–µ–ª—å", "—á–µ—Ç–≤–µ—Ä–≥", "–ò—Å—Ç–æ—Ä–∏—è –†–æ—Å—Å–∏–∏", "622"},
		{"–∑–Ω–∞–º–µ–Ω–∞—Ç–µ–ª—å", "—á–µ—Ç–≤–µ—Ä–≥", "–û–ø–µ—Ä–∞—Ü–∏–æ–Ω–Ω—ã–µ —Å–∏—Å—Ç–µ–º—ã –∏ —Å—Ä–µ–¥—ã", "503"},

		// –ó–Ω–∞–º–µ–Ω–∞—Ç–µ–ª—å - –ü—è—Ç–Ω–∏—Ü–∞
		{"–∑–Ω–∞–º–µ–Ω–∞—Ç–µ–ª—å", "–ø—è—Ç–Ω–∏—Ü–∞", "–ê—Ä—Ö–µ—Ç–∏–∫—Ç—É—Ä–∞ –∞–ø–ø–∞—Ä–∞—Ç–Ω—ã—Ö —Å—Ä–µ–¥—Å—Ç–≤", "330"},
		{"–∑–Ω–∞–º–µ–Ω–∞—Ç–µ–ª—å", "–ø—è—Ç–Ω–∏—Ü–∞", "–ò—Å—Ç–æ—Ä–∏—è –†–æ—Å—Å–∏–∏", "622"},
		{"–∑–Ω–∞–º–µ–Ω–∞—Ç–µ–ª—å", "–ø—è—Ç–Ω–∏—Ü–∞", "–≠–ª–µ–º–µ–Ω—Ç—ã –≤—ã—Å—à–µ–π –º–∞—Ç–µ–º–∞—Ç–∏–∫–∏", "512"},

		// –ó–Ω–∞–º–µ–Ω–∞—Ç–µ–ª—å - –í—ã—Ö–æ–¥–Ω—ã–µ
		{"–∑–Ω–∞–º–µ–Ω–∞—Ç–µ–ª—å", "—Å—É–±–±–æ—Ç–∞", "–≤—ã—Ö–æ–¥–Ω–æ–π", ""},
		{"–∑–Ω–∞–º–µ–Ω–∞—Ç–µ–ª—å", "–≤–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ", "–≤—ã—Ö–æ–¥–Ω–æ–π", ""},
	}

	for _, s := range schedule {
		_, err := db.Exec(
			"INSERT INTO schedule (week_type, day_of_week, subject,cabinet) VALUES ($1, $2, $3,$4)",
			s.weekType, s.dayOfWeek, s.subject, s.cabinet,
		)
		if err != nil {
			return fmt.Errorf("insert schedule: %w", err)
		}
	}

	fmt.Println("–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –¥–æ–±–∞–≤–ª–µ–Ω–æ –≤ —Ç–∞–±–ª–∏—Ü—É")
	return nil
}

func GetSchedule(db *sql.DB, weekType, dayOfWeek string) (string, error) {
	rows, err := db.Query("SELECT subject, cabinet FROM schedule WHERE week_type=$1 AND day_of_week=$2", weekType, dayOfWeek)
	if err != nil {
		return "", fmt.Errorf("query schedule: %w", err)
	}
	defer rows.Close()

	var result strings.Builder
	result.WriteString(fmt.Sprintf("üìÖ –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ %s (%s):\n\n", dayOfWeek, weekType))
	index := 1
	for rows.Next() {
		var subject string
		var cabinet sql.NullString

		if err := rows.Scan(&subject, &cabinet); err != nil {
			return "", fmt.Errorf("scan schedule: %w", err)
		}

		// –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –≤—ã—Ö–æ–¥–Ω—ã–µ
		if subject == "–≤—ã—Ö–æ–¥–Ω–æ–π" {
			continue
		}

		// –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –≤—ã–≤–æ–¥ —Å –∫–∞–±–∏–Ω–µ—Ç–∞–º–∏
		if cabinet.Valid && cabinet.String != "" {
			result.WriteString(fmt.Sprintf("%d. üìö %s (üö™ %s)\n", index, subject, cabinet.String))
		} else {
			result.WriteString(fmt.Sprintf("%d. üìö %s\n", index, subject))
		}
		index++
	}

	return result.String(), nil
}
func Subjects(subjects []string) string {
	var result strings.Builder
	for i, subject := range subjects {
		result.WriteString(fmt.Sprintf("%d. %s\n", i+1, subject))
	}
	return result.String()
}
